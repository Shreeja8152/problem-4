import java.util.*;

public class Solution {
    public List<Integer> eventualSafeNodes(int[][] graph) {
        int n = graph.length;
        List<List<Integer>> reverseGraph = new ArrayList<>();
        int[] indegree = new int[n];

        // Initialize reverse graph and indegree array
        for (int i = 0; i < n; i++) {
            reverseGraph.add(new ArrayList<>());
        }
 // Reverse the graph
        for (int i = 0; i < n; i++) {
            for (int neighbor : graph[i]) {
                reverseGraph.get(neighbor).add(i);
                indegree[i]++;
            }
        }
         // Queue to process terminal nodes
        Queue<Integer> queue = new LinkedList<>();
        for (int i = 0; i < n; i++) {
            if (indegree[i] == 0) {
                queue.add(i);
            }
        }
 // List to store safe nodes
        List<Integer> safeNodes = new ArrayList<>();

        // Process the graph
        while (!queue.isEmpty()) {
            int node = queue.poll();
            safeNodes.add(node);
            for (int neighbor : reverseGraph.get(node)) {
                indegree[neighbor]--;
                if (indegree[neighbor] == 0) {
                    queue.add(neighbor);
                }
            }
        }
         // Sort the safe nodes in ascending order
        Collections.sort(safeNodes);
        return safeNodes;
    }

    public static void main(String[] args) {
        Solution solution = new Solution();
        int[][] graph1 = {{1, 2}, {2, 3}, {5}, {0}, {5}, {}, {}};
        int[][] graph2 = {{1, 2, 3, 4}, {1, 2}, {3, 4}, {0, 4}, {}};

        System.out.println(solution.eventualSafeNodes(graph1)); // Output: [2, 4, 5, 6]
        System.out.println(solution.eventualSafeNodes(graph2)); // Output: [4]
    }
}